// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	example "github.com/mixarchitecture/arch/example/src/domain/example"
	i18n "github.com/mixarchitecture/arch/shared/i18n"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *Repository) Create(ctx context.Context, _a1 *example.Example) (*example.Example, *i18n.I18nError) {
	ret := _m.Called(ctx, _a1)

	var r0 *example.Example
	if rf, ok := ret.Get(0).(func(context.Context, *example.Example) *example.Example); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*example.Example)
		}
	}

	var r1 *i18n.I18nError
	if rf, ok := ret.Get(1).(func(context.Context, *example.Example) *i18n.I18nError); ok {
		r1 = rf(ctx, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*i18n.I18nError)
		}
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, field
func (_m *Repository) Get(ctx context.Context, field string) (*example.Example, *i18n.I18nError) {
	ret := _m.Called(ctx, field)

	var r0 *example.Example
	if rf, ok := ret.Get(0).(func(context.Context, string) *example.Example); ok {
		r0 = rf(ctx, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*example.Example)
		}
	}

	var r1 *i18n.I18nError
	if rf, ok := ret.Get(1).(func(context.Context, string) *i18n.I18nError); ok {
		r1 = rf(ctx, field)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*i18n.I18nError)
		}
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, limit, offset
func (_m *Repository) List(ctx context.Context, limit int, offset int) ([]*example.Example, int, *i18n.I18nError) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []*example.Example
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*example.Example); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*example.Example)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 *i18n.I18nError
	if rf, ok := ret.Get(2).(func(context.Context, int, int) *i18n.I18nError); ok {
		r2 = rf(ctx, limit, offset)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*i18n.I18nError)
		}
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *Repository) Update(ctx context.Context, _a1 *example.Example) (*example.Example, *i18n.I18nError) {
	ret := _m.Called(ctx, _a1)

	var r0 *example.Example
	if rf, ok := ret.Get(0).(func(context.Context, *example.Example) *example.Example); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*example.Example)
		}
	}

	var r1 *i18n.I18nError
	if rf, ok := ret.Get(1).(func(context.Context, *example.Example) *i18n.I18nError); ok {
		r1 = rf(ctx, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*i18n.I18nError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
